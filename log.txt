==20106== Memcheck, a memory error detector
==20106== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==20106== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
==20106== Command: ./a.out
==20106== 
* open_file_to_section(template.txt, @NETWORK_SIZE)
* looking for "@NETWORK_SIZE", found "@NETWORK_SIZE"
* open_file_to_section successful
* network->size set to 1000
* open_file_to_section(template.txt, @DEFAULT_STATE)
* looking for "@DEFAULT_STATE", found "@NETWORK_SIZE"
* looking for "@DEFAULT_STATE", found "1000"
* looking for "@DEFAULT_STATE", found ""
* looking for "@DEFAULT_STATE", found "@PARAMS"
* looking for "@DEFAULT_STATE", found "1"
* looking for "@DEFAULT_STATE", found "conductance 0.5"
* looking for "@DEFAULT_STATE", found ""
* looking for "@DEFAULT_STATE", found "@DEFAULT_STATE"
* open_file_to_section successful
* init_neuron_state->num_params set to 2
==20106== Use of uninitialised value of size 4
==20106==    at 0x4089BCB: _IO_vfscanf (in /lib/libc-2.12.so)
==20106==    by 0x4093E79: __isoc99_fscanf (in /lib/libc-2.12.so)
==20106==    by 0x8048963: init_init_neuron_state (neuron.c:47)
==20106==    by 0x8048DFF: main (main.c:16)
==20106== 
==20106== Invalid write of size 4
==20106==    at 0x4089BCB: _IO_vfscanf (in /lib/libc-2.12.so)
==20106==    by 0x4093E79: __isoc99_fscanf (in /lib/libc-2.12.so)
==20106==    by 0x8048963: init_init_neuron_state (neuron.c:47)
==20106==    by 0x8048DFF: main (main.c:16)
==20106==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==20106== 
==20106== 
==20106== Process terminating with default action of signal 11 (SIGSEGV)
==20106==  Access not within mapped region at address 0x0
==20106==    at 0x4089BCB: _IO_vfscanf (in /lib/libc-2.12.so)
==20106==    by 0x4093E79: __isoc99_fscanf (in /lib/libc-2.12.so)
==20106==    by 0x8048963: init_init_neuron_state (neuron.c:47)
==20106==    by 0x8048DFF: main (main.c:16)
==20106==  If you believe this happened as a result of a stack
==20106==  overflow in your program's main thread (unlikely but
==20106==  possible), you can try to increase the size of the
==20106==  main thread stack using the --main-stacksize= flag.
==20106==  The main thread stack size used in this run was 8388608.
==20106== 
==20106== HEAP SUMMARY:
==20106==     in use at exit: 15,504 bytes in 1,008 blocks
==20106==   total heap usage: 1,011 allocs, 3 frees, 16,016 bytes allocated
==20106== 
==20106== LEAK SUMMARY:
==20106==    definitely lost: 0 bytes in 0 blocks
==20106==    indirectly lost: 0 bytes in 0 blocks
==20106==      possibly lost: 0 bytes in 0 blocks
==20106==    still reachable: 15,504 bytes in 1,008 blocks
==20106==         suppressed: 0 bytes in 0 blocks
==20106== Rerun with --leak-check=full to see details of leaked memory
==20106== 
==20106== For counts of detected and suppressed errors, rerun with: -v
==20106== Use --track-origins=yes to see where uninitialised values come from
==20106== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 13 from 8)
segmentation fault
